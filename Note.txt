- Join 
Array를 .join() 을 사용하여 괄호 없이 프린트하기
.join()은 문자열에만 사용할 수 있기 때문에 문자열이 아닌 Array는 map(str, array)를 이용하여 각각의 값을 str으로 변환 후 사용 가능

print(' '.join(map(str, array)))

- 빈 array 크기 설정
크기: N
Array = [0]*N

- array 내에서 두 값 스와프
array[a], array[b] = array[b], array[a]

- set(array): array 의 중복요소를 합쳐준다

- input 을 int array 로 입력받고 싶을때 : list(map(int, input().split()))
- 아스키코드
	print(ord("C"))
	# 67
	print(chr(67))
	# C

- 런타임 에러
while True:
    try:
        처리할 구문
    except EOFError:
        break

- index -> array.index(X): array 안에서 X의 위치를 알려준다
	a = [1,2,3]
	a.index(1) = 0
	a.index(3) = 2

- array안에서 replace -> array.replace(a, b) array 안의 a 를 b 로 교체

-import sys
n = int(sys.stdin.readline())

- 2차원 배열 제대로 선언하기
N rows
M columns
[[0 for j in range(M)] for i in range(N)]

- for 문 _ 이용
for _ in range(N):
코드에서 _는 반복 변수(i 같은 것)를 사용하지 않겠다는 의미야.
for 문이 단순히 N번 반복하는 역할만 하면 되고,
반복 횟수를 세는 변수가 필요 없을 때 _를 사용해.

<Heap 정렬>
heapq.heappush(heap, num) → Min Heap에 숫자를 삽입 (자동 정렬됨).
heapq.heappop(heap) → 가장 작은 값을 꺼내어 출력.

sys.stdin.readline() → 입력 속도를 빠르게 하기 위해 사용. 

- write vs. sys.stdout.write
sys.stdout.write 는 
1. 문자열 변환이 필요 없음 → 입력된 데이터는 그대로 출력됨 (자동 변환 X)
2. 개행 문자 자동 추가 X → \n을 직접 넣어야 함.
3. 버퍼링이 효율적 → 여러 개의 출력을 한꺼번에 처리할 수 있음.

<DICTIONARY>
dictionary.setdefault(key, default_value)
	- key가 존재하면 해당 키의 값을 반환.
	- key가 없으면 default_value를 dictionary[key]에 할당한 후 반환.
word_len.setdefault(len(word), []).append(word)
	- word_len 딕셔너리에서 len(word)(단어 길이)를 키(key) 로 확인.
	- 만약 해당 키가 존재하지 않으면 word_len[len(word)] = [] 를 실행하여 빈 리스트를 생성.
	- 키가 존재하면 기존 리스트를 반환.
key, value 값 바꾸기
	- reverse_dic = {v: k for k,  v in DICTIONARY.items()}

<순서 매기기>
	num_list
	sorted_num = sorted(num_list)
	coord = [sorted_num.index(num) for num in num_list]

<STACK>
stack[-1] -> 스택의 맨 위(top) 값을 가져오는 표현

백준
- 1436 -> 동적계획법으로 다시 해보기

